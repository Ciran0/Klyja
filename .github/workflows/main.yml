# .github/workflows/main.yml

name: Klyja CI/CD

on:
  push:
    branches:
      - main
      - staging
      - 'feature/**'
      - 'fix/**'
      - 'chore/**'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
      - staging
      - 'feature/**'
      - 'fix/**'
      - 'chore/**'
    paths-ignore:
      - '**.md'

env:
  TEST_DATABASE_URL: postgres://user:password@localhost:5432/postgres
  IMAGE_NAME: ghcr.io/${{ github.repository_owner_lowercase }}/klyja

jobs:
  test:
    name: Run Linters and Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh -s -- -y

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '25.x'

      - name: Install headless browser dependencies for wasm-pack test
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./backend -> backend/target, ./geco -> geco/target"

      - name: Cache Node.js dependencies (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Backend Tests
        working-directory: ./backend
        run: cargo test --verbose

      - name: Run Geco (WASM) Rust Tests
        working-directory: ./geco
        run: cargo test --lib --verbose

      - name: Run Geco (WASM) Browser Tests (Headless)
        working-directory: ./geco
        run: wasm-pack test --headless --firefox

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Check Frontend Code Coverage
        if: always() 
        run: |
          echo "Checking frontend code coverage..."
          COVERAGE_FILE="frontend/coverage/coverage-summary.json"
          # --- SET YOUR DESIRED MINIMUM COVERAGE PERCENTAGE BELOW ---
          MIN_COVERAGE=70 # Example: 70% line coverage

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "::error::Coverage report $COVERAGE_FILE not found!"
            exit 1
          fi

          # Using jq to parse line coverage percentage. 
          # This assumes the structure from Istanbul's JSON reporter used by Vitest ('json' reporter).
          # '.total.lines.pct' is a common path for overall line coverage percentage.
          LINE_COVERAGE_PCT=$(jq '.total.lines.pct' $COVERAGE_FILE)

          if [ -z "$LINE_COVERAGE_PCT" ] || [ "$LINE_COVERAGE_PCT" == "null" ]; then
            echo "::error::Could not extract line coverage percentage from $COVERAGE_FILE."
            echo "File content for debugging:"
            cat $COVERAGE_FILE
            exit 1
          fi

          echo "Current frontend line coverage: $LINE_COVERAGE_PCT%"
          echo "Required minimum frontend line coverage: $MIN_COVERAGE%"

          # Use awk for floating point comparison
          IS_SUFFICIENT=$(awk -v current="$LINE_COVERAGE_PCT" -v min="$MIN_COVERAGE" 'BEGIN { print (current >= min) ? "1" : "0" }')

          if [ "$IS_SUFFICIENT" -eq 1 ]; then
            echo "Frontend code coverage meets the threshold."
          else
            echo "::error::Frontend code coverage ($LINE_COVERAGE_PCT%) is below the required minimum ($MIN_COVERAGE%)."
            exit 1
          fi
  

  build-and-push-docker:
    name: Build Docker Image (Push for main/staging)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (
        github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/staging' ||
        startsWith(github.ref, 'refs/heads/feature/') ||
        startsWith(github.ref, 'refs/heads/fix/') ||
        startsWith(github.ref, 'refs/heads/chore/')
        )
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare image owner name
        id: prep_owner
        run: |
          OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER=$OWNER_LOWERCASE" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.prep_owner.outputs.OWNER }}/klyja
          tags: |
            # Specific tags for main and staging
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' }}
            # Add short commit SHA as a tag for all relevant branch pushes
            type=sha,prefix=,suffix=,event=branch
            # 'latest' tag only for the main branch
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            # Specific tags for feature, fix, and chore branches if you decide to push them (controlled by 'push' flag below)
            type=match,pattern=refs/heads/feature/(.*),group=1,value=feat-{{value}},enable=${{ startsWith(github.ref, 'refs/heads/feature/') }}
            type=match,pattern=refs/heads/fix/(.*),group=1,value=fix-{{value}},enable=${{ startsWith(github.ref, 'refs/heads/fix/') }}
            type=match,pattern=refs/heads/chore/(.*),group=1,value=chore-{{value}},enable=${{ startsWith(github.ref, 'refs/heads/chore/') }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js dependencies (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend for production
        working-directory: ./frontend
        run: npm run build # This uses "vite build" as per your package.json

      - name: Verify production build output
        run: |
          echo "Checking for geco-mock.js in frontend/dist..."
          if find frontend/dist -type f -name "*geco-mock*" -print -quit | grep -q .; then
            echo "::error::geco-mock.js or related file found in frontend/dist directory!"
            echo "Listing contents of frontend/dist for debugging:"
            ls -R frontend/dist
            exit 1
          else
            echo "geco-mock.js not found in frontend/dist. Check passed."
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.prep_owner.outputs.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # Only PUSH images for main and staging branches
          # For feature, fix, chore branches, the image will be built but not pushed
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-staging:
    name: Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: http://staging.klyja.com
    steps:
      - name: Trigger Render Deploy Hook
        run: |
          echo "Triggering Render deployment for staging..."
          response_code=$(curl -s -o /dev/stderr -w "%{http_code}" -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}")
          if [ "$response_code" -ge 200 ] && [ "$response_code" -lt 300 ]; then
            echo "Render deploy hook successfully triggered (HTTP $response_code)."
          else
            echo "!!! Render deploy hook failed (HTTP $response_code)."
            # Optionally, fail the step if the hook doesn't return a success code
            # exit 1
          fi
# test for triggering the pipeline
