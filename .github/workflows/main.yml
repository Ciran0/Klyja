name: Klyja CI/CD

on:
  push:
    branches:
      - main # For future production deployments
      - staging # For staging deployments
  pull_request:
    branches:
      - main
      - staging

env:
  # Used by backend tests (TestDb)
  TEST_DATABASE_URL: postgres://user:password@localhost:5432/postgres
  # GHCR path for your image
  IMAGE_NAME: ghcr.io/${{ github.repository_owner_lowercase }}/klyja

jobs:
  test:
    name: Run Linters and Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres # TestDb will create its own temporary databases
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable # Or your specific Rust version

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh -s -- -y

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Match your frontend/package.json engines

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '25.x' # Or your required version

      - name: Install headless browser dependencies for wasm-pack test
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Cache Rust dependencies (Cargo registry, index, target)
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./backend -> backend/target, ./geco -> geco/target" # Cache for each crate

      - name: Cache Node.js dependencies (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Backend Tests
        working-directory: ./backend
        # TEST_DATABASE_URL is already set in job env
        run: cargo test --verbose

      - name: Run Geco (WASM) Rust Tests
        working-directory: ./geco
        run: cargo test --lib --verbose

      - name: Run Geco (WASM) Browser Tests (Headless)
        working-directory: ./geco
        run: wasm-pack test --headless --firefox # Or --chrome, Firefox is often easier in CI

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci # Use ci for cleaner installs

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Run only if tests pass
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    permissions:
      contents: read
      packages: write # Needed to push to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare image owner name
        id: prep_owner
        run: |
          OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER=$OWNER_LOWERCASE" >> $GITHUB_OUTPUT
          echo "Derived lowercase owner for image: $OWNER_LOWERCASE" # For debugging

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.prep_owner.outputs.OWNER }}/klyja # Use the derived lowercase owner
          tags: |
            type=ref,event=branch  # Generates 'staging' for staging branch, 'main' for main branch
            type=sha,prefix=,suffix=,event=branch # Adds short commit SHA as a tag for branch pushes (e.g., abc1234)
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }} # Adds 'latest' tag only for the main branch

      - name: Debug Docker meta output
        run: |
          echo "Generated Tags: ${{ steps.meta.outputs.tags }}"
          echo "Generated Labels: ${{ steps.meta.outputs.labels }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.prep_owner.outputs.OWNER }} # Use the derived lowercase owner for login
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by docker/metadata-action
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by docker/metadata-action
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-staging:
     name: Deploy to Staging (Render)
     runs-on: ubuntu-latest
     needs: build-and-push-docker # Ensure image is pushed first
     if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
     environment:
       name: staging
       url: http://staging.klyja.com # You'll update this to your Render URL or custom domain later

     steps:
       - name: Trigger Render Deploy Hook
         run: |
           echo "Triggering Render deployment for staging..."
           response_code=$(curl -s -o /dev/stderr -w "%{http_code}" -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}")
           if [ "$response_code" -ge 200 ] && [ "$response_code" -lt 300 ]; then
             echo "Render deploy hook successfully triggered (HTTP $response_code)."
           else
             echo "!!! Render deploy hook failed (HTTP $response_code)."
             # Optionally, fail the step if the hook doesn't return a success code
             # exit 1 
           fi
