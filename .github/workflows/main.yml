name: Klyja CI/CD

on:
  push:
    branches:
      - main # For future production deployments
      - staging # For staging deployments
  pull_request:
    branches:
      - main
      - staging

env:
  # Used by backend tests (TestDb)
  TEST_DATABASE_URL: postgres://user:password@localhost:5432/postgres
  # GHCR path for your image
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/klyja # Lowercase repo owner and image name

jobs:
  test:
    name: Run Linters and Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres # TestDb will create its own temporary databases
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable # Or your specific Rust version

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh -s -- -y

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Match your frontend/package.json engines

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '25.x' # Or your required version

      - name: Install headless browser dependencies for wasm-pack test
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Cache Rust dependencies (Cargo registry, index, target)
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./backend -> backend/target, ./geco -> geco/target" # Cache for each crate

      - name: Cache Node.js dependencies (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Backend Tests
        working-directory: ./backend
        # TEST_DATABASE_URL is already set in job env
        run: cargo test --verbose

      - name: Run Geco (WASM) Rust Tests
        working-directory: ./geco
        run: cargo test --lib --verbose

      - name: Run Geco (WASM) Browser Tests (Headless)
        working-directory: ./geco
        run: wasm-pack test --headless --firefox # Or --chrome, Firefox is often easier in CI

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci # Use ci for cleaner installs

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Run only if tests pass
    # Only run on pushes to main or staging, not on PRs for this job
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    permissions:
      contents: read
      packages: write # Needed to push to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Docker Tag
        id: docker_meta
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "tag=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "tag=staging" >> $GITHUB_OUTPUT
          else
            # For other branches or PRs (though this job has an if condition)
            echo "tag=dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:${{ github.ref == 'refs/heads/main' && 'latest' || github.ref_name }} # e.g., klyja:staging or klyja:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: http://staging.klyja.com # Add your staging URL here

    steps:
      - name: Deploy to Staging Server (Example using SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }} # e.g., staging.klyja.com or its IP
          username: ${{ secrets.STAGING_USERNAME }} # e.g., ubuntu, klyja_deploy
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit on error
            export IMAGE_NAME=${{ env.IMAGE_NAME }} # Make available to script
            export IMAGE_TAG=staging # Use the 'staging' tag

            # Log in to GHCR on the server
            echo "${{ secrets.STAGING_GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the new image
            docker pull $IMAGE_NAME:$IMAGE_TAG

            # Stop and remove the old container if it exists
            docker stop klyja-staging || true
            docker rm klyja-staging || true

            # Run the new container
            # Ensure STAGING_DATABASE_URL is set up on your server or as a secret here
            docker run -d \
              --name klyja-staging \
              -p 80:8080 \
              -e APP_ENV="production" \
              -e PORT="8080" \
              -e DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" \
              --restart unless-stopped \
              $IMAGE_NAME:$IMAGE_TAG
            
            # Optional: Clean up old images
            docker image prune -f
